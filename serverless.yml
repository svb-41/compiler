service: starship-compiler
frameworkVersion: '3'
useDotenv: true
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3333
  dynamodb:
    stages:
      - dev
    start:
      inMemory: false
      migrate: true
      port: 8000

provider:
  name: aws
  region: eu-west-3
  runtime: nodejs14.x
  memorySize: 2048
  timeout: 50
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Resource: '*'
          Action:
            - s3:*
            - dynamodb:*

functions:
  profile:
    handler: src/handlers/profile.profile
    events:
      - httpApi:
          path: /user/{username}
          method: get
  sync:
    handler: src/handlers/sync.sync
    events:
      - httpApi:
          path: /data/sync
          method: post
  fetchData:
    handler: src/handlers/sync.fetch
    events:
      - httpApi:
          path: /data/fetch
          method: get
  compile:
    handler: src/handlers/compile.compile
    events:
      - httpApi:
          path: /compile
          method: post
  ai:
    handler: src/handlers/compile.get
    events:
      - httpApi:
          path: /ai
          method: get
  skirmishes-save:
    handler: src/handlers/skirmishes.save
    events:
      - httpApi:
          path: /skirmishes
          method: post
  skirmishes-fight:
    handler: src/handlers/skirmishes.fight
    events:
      - httpApi:
          path: /skirmishes/{username}
          method: get
  stats-save:
    handler: src/handlers/stats.save
    events:
      - httpApi:
          path: /stats
          method: post
  stats-get:
    handler: src/handlers/stats.get
    events:
      - httpApi:
          path: /stats
          method: get

resources:
  Resources:
    # Save the state of the app
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: preferences
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Save the skirmishes configurations
    skirmishTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: skirmishes
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Save the fight stats
    statsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stats
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Save the fight stats
    fleetConfigsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: fleetConfigs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Save the AI
    aisTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ais
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
